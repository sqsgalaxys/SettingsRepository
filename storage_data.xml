<application>
  <component name="AppStorage">
    <histories>
      <item value="Instantiation" />
      <item value="Ancestor" />
      <item value="snapshot" />
      <item value="test" />
      <item value="科学" />
      <item value="price" />
      <item value="interoperability" />
      <item value="sentence" />
      <item value="句子" />
      <item value="Senction" />
      <item value="validation" />
      <item value="continue" />
      <item value="输入的数值必须大于100" />
      <item value="containers" />
      <item value="indicated" />
      <item value="categories" />
      <item value="caret Position" />
      <item value="Constants" />
      <item value="with Closeable" />
      <item value="Closure" />
      <item value="Communications (" />
      <item value="task Mutator" />
      <item value="mutate" />
      <item value="seedling" />
      <item value="initialization" />
      <item value="anonymous" />
      <item value="Build" />
      <item value="reduce" />
      <item value="common" />
      <item value="Vector" />
      <item value="end" />
      <item value="considered" />
      <item value="hierarchy" />
      <item value="inception Year" />
      <item value="after Properties Set" />
      <item value="distinguishing" />
      <item value="Aggregator" />
      <item value="access" />
      <item value="We have applied so called strict layering which means that the layers can only access the classes directly beneath them ." />
      <item value="&lt; p &gt; We have applied so called strict layering which means that the layers can only access the classes directly beneath them . This leads the solution to create an additional set of DT Os ( &lt; code &gt; Cake Info &lt;/ code &gt;, &lt; code &gt; Cake Topping Info &lt;/ code &gt;, &lt; code &gt; Cake Layer Info &lt;/ code &gt;) to translate data between layers . In other words , &lt; code &gt; Cake Baking Service &lt;/ code &gt; cannot return entities ( &lt; code &gt; Cake &lt;/ code &gt;, &lt; code &gt; Cake Topping &lt;/ code &gt;, &lt; code &gt; Cake Layer &lt;/ code &gt;) directly since these reside on data access layer but instead translates these into business layer DT Os (&lt; code &gt; Cake Info &lt;/ code &gt;, &lt; code &gt; Cake Topping Info &lt;/ code &gt;, &lt; code &gt; Cake Layer Info &lt;/ code &gt;) and returns them instead . This way the presentation layer does not have any knowledge of other layers than the business layer and thus is not affected by changes to them ." />
      <item value="monostate" />
      <item value="Reactive" />
      <item value="aggregator" />
      <item value="concepts" />
      <item value="paradigms" />
      <item value="providing" />
      <item value="Quality" />
      <item value="Roles Allowed" />
      <item value="optimization" />
      <item value="touched" />
    </histories>
  </component>
</application>